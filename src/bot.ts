import discord from "discord.js";
import { SlashCommandBuilder } from '@discordjs/builders';
import CreateDebugger from '@src/util/debug';

import dotenv from 'dotenv'
dotenv.config();

const REST = discord.REST;
const Routes = discord.Routes;
const Client = discord.Client;
const GatewayIntentBits = discord.GatewayIntentBits;

const isDebug = true;
const dbgr = CreateDebugger(isDebug);

type AnyChannel = (discord.DMChannel | discord.PartialDMChannel | discord.NewsChannel | discord.StageChannel | discord.TextChannel | discord.PrivateThreadChannel | discord.PublicThreadChannel<any> | discord.VoiceChannel)

export function bootBot() {
  // TOKEN„Å™„Åã„Å£„Åü„ÇâÂç≥Ê≠ª„Åô„Çã
  if (process.env.DISCORD_BOT_SECRET_TOKEN == undefined) {
    dbgr.log("DISCORD_BOT_TOKEN„ÅåË®≠ÂÆö„Åï„Çå„Å¶„ÅÑ„Åæ„Åõ„Çì„ÄÇ");
    process.exit(0);
  }

  /**
   * „ÉÅ„É£„É≥„Éç„É´IDÂÖ®Ëà¨„É©„ÉÉ„Éë„Éº
   */
  const channelIds = {
    // „Åì„ÅÆBOT„ÉÅ„É£„É≥„Éç„É´ID„ÅØ `‰∏ñÁïåÂæÅÊúç#ÂåøÂêç„ÇÅ„Åü„Åû„ÅÇ`
    anon: process.env.DISCORD_CHANNEL_ANON ?? "",
    // „Åì„ÅÆBOT„ÉÅ„É£„É≥„Éç„É´ID„ÅØ `‰∏ñÁïåÂæÅÊúç#„Å≤„Çç„ÇÜ„Åç`
    log: process.env.DISCORD_CHANNEL_LOG ?? "",
  }

  /**
   * „Ç≥„Éû„É≥„Éâ„ÅÆ„Ç≠„Éº
   */
  const commandKeys = { 
    /**
     * ping„Ç≥„Éû„É≥„Éâ
     */
    ping: "ping",
    /**
     * Â≠êÂÆÆ„Å™„Åß„Å™„Åß„Ç≥„Éû„É≥„Éâ
     */
    pregnant: "cervix",
    /**
     * ÂåøÂêç„ÇÅ„Åü„Åû„ÅÇÁô∫Ë®Ä„Ç≥„Éû„É≥„Éâ
     */
    anon: "anon",
  }

  /*
   * „Ç≥„Éû„É≥„ÉâÁôªÈå≤
   * „ÅÑ„Çè„ÇÜ„Çã„Çπ„É©„ÉÉ„Ç∑„É•„Ç≥„Éû„É≥„Éâ (/„Åã„ÇâÈñãÂßã„Åô„Çã„Ç≥„Éû„É≥„Éâ) „ÇíÁôªÈå≤„Åô„Çã„Åì„Å®„ÅåÂèØËÉΩ
   */

  // ÂåøÂêçÊõ∏„ÅçËæº„ÅøÁî®„Ç≥„Éû„É≥„Éâ
  const builder = new SlashCommandBuilder()
  const anonCommand = builder.setName(commandKeys.anon)
  .setDescription("(ÂåøÂêç„ÅäÂ¨¢Êßò„ÅÆ‰ª£„Çè„Çä) „ÅÇ„Å™„Åü„Å´‰ª£„Çè„Å£„Å¶„ÇÅ„Åü„Åû„ÅÇ„Åå„Å§„Å∂„ÇÑ„Åç„Åæ„Åô")
  .addStringOption(option => option.setName("message").setDescription("„É°„ÉÉ„Çª„Éº„Ç∏").setRequired(true))


  /**
   * @type Command
   * @property name {string} „Ç≥„Éû„É≥„ÉâÂêç
   * @property description {string} „Ç≥„Éû„É≥„ÉâË©≥Á¥∞
   */
  type Command = {
    name: string,
    description: string,
  }

  /**
   * @type commands {Command[]} Âèó‰ªòÂèØËÉΩ„Ç≥„Éû„É≥„Éâ„É™„Çπ„Éà
   */
  const commands: Command[] = [
    {
      name: commandKeys.ping,
      description: "Replies with ( ‚óû‚Ä∏‚óü )",
    },
    {
      name: commandKeys.pregnant,
      description: "Replies with Â≠êÂÆÆ„Å™„Åß„Å™„Åß„Åó„Åü„ÅÑ",
    },
    anonCommand,
  ];

  const rest = new REST({ version: '10' }).setToken(process.env.DISCORD_BOT_SECRET_TOKEN);

  (async () => {
    try {
      dbgr.log('Started refreshing application (/) commands.');

      // „Åì„Åì„ÅßÂÆüÈöõ„Å´Ë®≠ÂÆö„Åó„Åü„Ç≥„Éû„É≥„Éâ„ÇíÁôªÈå≤„Åó„Å¶„ÅÑ„Çã
      await rest.put(Routes.applicationCommands(process.env.DISCORD_BOT_SECRET_CLIENT ?? ""), { body: commands });

      dbgr.log('Successfully reloaded application (/) commands.');
    } catch (error) {
      dbgr.log(error);
    }
  })();

  /*
   * BOTËµ∑Âãï
   * BOT„ÅÆËµ∑ÂãïÊôÇÂá¶ÁêÜ„Å™„Å©„ÅØ„Åì„Å£„Å°
   */
  const client = new Client({ intents: GatewayIntentBits.Guilds });

  client.on("interactionCreate", async (interaction) => {
    // BOT„Åå„Å™„Çì„Åã„Åó„Çâ„ÅÆ„Ç≥„Éû„É≥„Éâ„Å™„Å©„ÇíÂèóÈ†ò„Åó„Åü„Å®„Åç„ÅÆÂá¶ÁêÜ
    if (!interaction.isChatInputCommand()) return;

    if (interaction.commandName === commandKeys.ping) {
      await interaction.reply("( ‚óû‚Ä∏‚óü )");
    }
    if (interaction.commandName === commandKeys.pregnant) {
      await interaction.reply("Â≠êÂÆÆ„Å™„Åß„Å™„Åß„Åó„Åü„ÅÑ");
    }
    if (interaction.commandName === commandKeys.anon) {
      dbgr.log("ÂåøÂêç„ÅäÂ¨¢Êßò channnelId: " + channelIds.anon)
      const ch = client.channels.cache.get(channelIds.anon)
      if (ch === undefined) {
        dbgr.log("ÂåøÂêç„ÅäÂ¨¢Êßò channnelId: " + channelIds.anon)
        await interaction.reply("Â£Å„Å´Ë©±„Åó„Åã„Åë„Åï„Åõ„Çà„ÅÜ„Å®„Åô„Çã„Å™üí¢\nchannel-id: " + channelIds.anon);
        return;
      }
      dbgr.log("interaction.options: " + interaction.options)
      dbgr.log(interaction.options)
      //await ch.send(interaction.options.getString("message", true))
      await interaction?.channel?.send(interaction.options.getString("message", true))
    }
  });


  /*
   * BOT„Å®„ÅÆ‰ºöË©±„ÅÆÂÆöÁæ©
   * ‰ºöË©±„ÅÆÂÜÖÂÆπ„ÇíÂÖ•Âäõ„Åô„ÇãÂ†¥Âêà„ÅØ„Åì„Å£„Å°
   */
  client.on("message", (message) => {
    dbgr.log("message.author.id: " + message.author.id)
    dbgr.log("client.user.id: " + message.author.bot)
    dbgr.log("message.content: " + message.content)

    if (client.user === null || client.user === undefined) {
      sendReply(message, `„ÅäÂâçË™∞„Å†„Çàüí¢ (client.user„Åå ${typeof client.user} )\n`);
      return;
    }

    // BOT„Ååwatch„Åó„Å¶„ÅÑ„Çã„ÉÅ„É£„É≥„Éç„É´„Åß„Ç¢„ÇØ„Ç∑„Éß„É≥„Åï„Çå„Åü„Å®„Åç„ÅÆÂá¶ÁêÜ
    if (message.author.id == client.user.id || message.author.bot) {
      return;
    }
    if (message.isMemberMentioned(client.user)) {
      sendReply(message, "Âëº„Å≥„Åæ„Åó„Åü„ÅãÔºü");
      return;
    }
    if (message.content.match(/„Å´„ÇÉÔΩû„Çì|„Å´„ÇÉ„Éº„Çì/)) {
      let text = "„Å´„ÇÉÔΩû„Çì";
      sendMsg(message, text);
      return;
    }
  });

  async function sendReply(message: discord.Message, text: string) {
    await message.reply(text)
    .then(() => dbgr.log("„É™„Éó„É©„Ç§ÈÄÅ‰ø°: " + text))
    .catch((err: Error) => dbgr.log(err));
  }

  async function sendMsg(message: discord.Message, text: string) {
    await message.channel
    .send(text)
    .then(() => dbgr.log("„É°„ÉÉ„Çª„Éº„Ç∏ÈÄÅ‰ø°: " + text))
    .catch((err: Error) => dbgr.log(err));
  }


  // „É≠„Ç∞„Ç§„É≥ÂÆüÊñΩ
  client.login(process.env.DISCORD_BOT_SECRET_TOKEN);

  client.on("ready", (cl: discord.Client<boolean>) => {
    // BOT„ÅÆÂæÖ„Å°Âèó„ÅëÈñãÂßã
    dbgr.log("BotÊ∫ñÂÇôÂÆå‰∫ÜÔΩû");
    cl.user?.setPresence({
      activities: [
        {
          name: "„Åí„Éº„ÇÄ",
          state: "„Å¥„ÇÖ„Å£„Å¥„ÇÖ‰∏≠"
        },
      ],
    });

    // „Åì„ÅÆBOT„ÉÅ„É£„É≥„Éç„É´ID„ÅØ `‰∏ñÁïåÂæÅÊúç#„Å≤„Çç„ÇÜ„Åç`
    client.channels
    .fetch(channelIds.log)
    .then((channel) => {
      const ch = channel as AnyChannel
      ch.send("Ë´∏Ë™¨„ÅÇ„Çã");
    })
  });

}

